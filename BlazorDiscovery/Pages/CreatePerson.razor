@page "/personmanagement/new"
@attribute [Authorize]

@using BlazorBootstrap
@using BlazorDiscovery.Areas.PersonManagement.Contracts
@using BlazorDiscovery.Areas.PersonManagement.Services
@using BlazorDiscovery.Views
@inject PersonManagementService PersonManagementService

<PageTitle>Criar pessoa</PageTitle>

<h1>Criar pessoa</h1>

@if (Person is not null)
{
    <Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
    <EditForm Model=@Person OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <div class="form-group">
            <label For="Name">Nome</label>
            <InputText class="form-control" @bind-Value="Person!.Name" Id="Name"></InputText>
            <ValidationMessage For="() => Person.Name" />
        </div>

        <div class="form-group">
            <label>Telefone</label>
            <InputText class="form-control" @bind-Value="Person!.Phone"></InputText>
            <ValidationMessage For="() => Person.Phone" />
        </div>

        <div class="form-group">
            <label>E-Mail</label>
            <InputText class="form-control" @bind-Value="Person!.Email"></InputText>
            <ValidationMessage For="() => Person.Email" />
        </div>

        <div class="form-group">
            <label>Data de Nascimento</label>
            <InputDate class="form-control" @bind-Value="Person!.BirthDate"></InputDate>
            <ValidationMessage For="() => Person.BirthDate" />
        </div>

        <h6>Endereço</h6>
        <div class="form-group">
            <label>CEP</label>
            <InputText class="form-control" @bind-Value="Person!.Address.ZipCode"></InputText>
            <ValidationMessage For="() => Person.Address.ZipCode" />
        </div>
        <div class="form-group">
            <label>Rua</label>
            <InputText class="form-control" @bind-Value="Person!.Address.Street"></InputText>
            <ValidationMessage For="() => Person.Address.Street" />
        </div>
        <div>
            <label>Número</label>
            <InputText class="form-control" @bind-Value="Person!.Address.Number"></InputText>
            <ValidationMessage For="() => Person.Address.Number" />
        </div>
        <div class="form-group">
            <label>Cidade</label>
            <InputText class="form-control" @bind-Value="Person!.Address.City"></InputText>
            <ValidationMessage For="() => Person.Address.City" />
        </div>
        <div class="form-group">
            <label>Estado</label>
            <InputText class="form-control" @bind-Value="Person!.Address.State"></InputText>
            <ValidationMessage For="() => Person.Address.State" />
        </div>
        <input type="submit" class="btn btn-primary" value="Save" />
    </EditForm>
}

@code {
    List<ToastMessage> messages = new List<ToastMessage>();

    private PersonView? Person { get; set; } = new PersonView();

    async void ValidFormSubmitted(EditContext editContext)
    {
        var model = new CreatePersonModel(
            Person!.Name,
            Person!.BirthDate,
            Person!.Document,
            new PersonModel.PersonModelAddress(
                Person!.Address.Street,
                Person!.Address.Number,
                Person!.Address.City,
                Person!.Address.State,
                Person!.Address.ZipCode),
            Person!.Phone,
            Person!.Email);
        var result = await PersonManagementService.CreateAsync(model);
        messages.Add(new ToastMessage
        {
            Type = ToastType.Success,
            Title = "Usuário editado com sucesso",
            HelpText = $"Sucesso!",
            Message = $"Sucessagem!",
        });
    }

    void InvalidFormSubmitted(EditContext editContext) { }
}
