@layout MainLayout
@page "/login"
@using System.Security.Claims
@using BlazorDiscovery.Areas.Identity.Contracts
@using BlazorDiscovery.Areas.Identity.Services
@using Blazored.SessionStorage
@using System.Text.Json
@attribute [AllowAnonymous]
@inject LoginService LoginService
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

<EditForm class="form-signin mb-4" Model="@_credential" OnValidSubmit="@Authenticate">
    <div class="form-group">
        <label for="user-name">User name</label>
        <InputText class="form-control" id="user-name" aria-describedby="emailHelp" @bind-Value=@_credential.UserName />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value=@_credential.Password />
    </div>
    <div class="form-group">
        <button type="submit" id="login" name="login" class="btn btn-dark">Login</button>
    </div>
</EditForm>

@code {
    public class Credentials { public string UserName { get; set; } = ""; public string Password { get; set; } = ""; }
    private Credentials _credential = new Credentials();

    private async Task Authenticate()
    {
        var authRequest = new AuthRequest(_credential.UserName, _credential.Password);
        // TODO: Remove mock
        // var authResponse = await LoginService.Login(authRequest!);
        var authResponse = new AuthResponse();
        authResponse.Token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzZXJ2IiwiaWF0IjoxNzI5NzMzNTU2LCJleHAiOjE3NjEyNjk1NTYsImF1ZCI6Ind3dy5leGFtcGxlLmNvbSIsInN1YiI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJHaXZlbk5hbWUiOiJKb2hubnkiLCJTdXJuYW1lIjoiUm9ja2V0IiwiRW1haWwiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.5nWXsGM86zDml3eAI1xoExc3irZEdj-x6E7szuzeqjE";

        if (authResponse != null)
        {
            await SessionStorage.SetItemAsync("token", authResponse.Token);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(authResponse.Token!);
            NavigationManager.NavigateTo("/");
        }
    }
}
